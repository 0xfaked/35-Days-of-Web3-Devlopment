// I'm a comment!
// SPDX-License-Identifier: MIT

pragma solidity ^0.8.8; //it means it will only uses version above 0.8.8
// pragma solidity ^0.8.0;
// pragma solidity >=0.8.0 <0.9.0;

contract SimpleStorage {

    uint256 favoriteNumber;

    struct People { 
        uint256 favoriteNumber;
        string name;
    }// created a struct of favoritenumber and name.
    // uint256[] public anArray;
    People[] public people; // created an array and using People struct.

    mapping(string => uint256) public nameToFavoriteNumber; //created an var named "nametofavoritenumber" and mapped the string to uint, you know what does mapping means(linking them with eachother).

    function store(uint256 _favoriteNumber) public virtual { //created an function and taken uint input and set the function to virtual it means other contract can override this function
        favoriteNumber = _favoriteNumber; // specifying favoritenumber will be updated to input favoritenumber. after the function executed.
    }
    
    function retrieve() public view returns (uint256){
        return favoriteNumber;
    }// cause our favoritenumber is not public we can't see it directly, so here we created a funciton and returning the value of Global var Favoritenumber

    function addPerson(string memory _name, uint256 _favoriteNumber) public {// taking an input of _name and _favoritenumber with public visibility
        people.push(People(_favoriteNumber, _name));// storing the values with the help of struct"People" In an created array people.
        nameToFavoriteNumber[_name] = _favoriteNumber; //mapping the name to the number , if we called name then we can also get the favoritenumber of that person.
    }
}
```

Second “StorageFactory.sol“

```solidity
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;
import "./SimpleStorage.sol";// Importing function is great cause you don't need to copy paste the whole codebase above contract.
// A single Solidity file can contain multiple contracts by placing each contract below the pragma solidity statement and above the starting of the next contract.

contract StorageFactory{
    SimpleStorage[] public simpleStorageArray; 

    function createSimpleStorageContract() public {
        SimpleStorage SimpleStorage = new SimpleStorage();
        simpleStorageArray.push(SimpleStorage);
    
    }
    function sfStore(uint _simpleStorageIndex, uint _simpleStorageNumber ) public {
    SimpleStorage simpleStorage = simpleStorageArray[_simpleStorageIndex];    
    simpleStorage.store(_simpleStorageNumber);
    }

    function sfGet(uint _simpleStorageIndex) public view returns (uint){
        SimpleStorage simpleStorage = simpleStorageArray[_simpleStorageIndex];
        return simpleStorage.retrieve();
    }
}
```

Third “ExtraStorage.sol”

```solidity
//SPDX-License-Identifier: MIT
pragma solidity ^0.8.8;

import "./SimpleStorage.sol";

contract ExtraStorage is SimpleStorage { // it can now inherit all the functionality of SimpleStorage Contract.
    //+5
    //override
    //virtual override.:- If you have to override a function of a contract you need to add Virtual keyword infront of it. 
    // and override keyword in front of your new function that you want to override with.

    function store(uint _favoriteNumber) public override  {
        favoriteNumber = _favoriteNumber + 5 ;
    }

}
```

f
